Here we learn about the System Design topic first we no about abstraction;

Previously we will Discuss About of Inheritance;

Qucik Revison of The Inheritance;


Abstraction;

Topics to Cover later on 

  ----Abstraction
  ---- Abstract Class
  ---- Polymorphism
 ----- Design Principle
  ----  Solid principle
   

Abstraction
============
  In Collage we have Researh paper and in last page we mention important detail of your project mention here important
  details;


Create Solution for your Customer
--------->
Working for the company---

Hiding the all the unnecessary details;

----> What are the ways to make the customere happy ;

 Simplicity;
 Easy to use;
 security;

  Advantage of Abstraction
  
Simplicity easy to use
Security;
We Can upgrade or improve the implementation without impacting  the users


  Suppose we are using ipad ios 15 later new verson come ios 15.5 
  see here we are having same device and upgrade the software not the device ;
  upgrading the system software

Ways to achieve Abstraction

       Abstraction
 Abstract class
 Interface;

  syntax for abstract class 
   public abstract class A {ss

      public void details()
{
   funtion with declare and declarition
}

  public abstract void funtionname(); abstract method;





purely abstract clas =

 public abstract class A{

  public abstract void f1();
  public abstract void f2();

purely abstract behave like a interface but not a interface;


Question: When to prefer abstract class when to prefer interface 



public abstract class A {

 constructor()

{

}

function declaration;
function with definition;



}

}
  

}

Employee {  Employee Details compute salary)  Abstract method for details and salary compute

1 Developer Bp, Bonus, ot
2 Tester bp,ot,

Regular class vs abstract class;
 Abstract clas with force the base class to provide implemention for the abstract method 

Regular class - you will have the option to impliment or not implement;


Note - Abstract class with no abstract methods will behave like a regular class



Abstract class vs Interface;


Interface Employee {

 function1();  ->Calculate bonus
  function(); Is Emp of Month;
}


Note - When you want only function declartion then prefer interface;


 IEmp 
-----------------------
    
                    ---------------------GetDetails();
                 
                    ---------------------GetSalary();






------------------------



Students                                      Employee();
-------GetDetails();                              split it into 2 parts;                    


2) ISalary ---------------------------- getSalary();





Note:
-----
------ We Can extend only one abstract class, even it is purely abstract class;
      but we can have one or more implement;
     

   Great Best Deffrence between Inteface and abastract are we can provide the constructor inside the abstract class but 
  we can not provide in interface ;




Polymorphism:===============================;
poly  - Many;
One object having deffrent behaviour is know as Polymorphism;

--------------- Student

-----------------Brother

Iam(Object) --------------- Son

---------------- Employee


-----------------Teacher;

Static Polymorphism;

Dynamic Polymorphism;


Static: Compile Time;
Runtime : Dynamic Polymorphism;


Static compile time polymorphism;
At the compile time we we can achive compile time polymorphism using method overloading;

Dyamic Polymorphism;

public int 




Based On Inheritance ;


Dog d = new Animal()--------------



Method Overriding;

Animals  
Dog               Cat;
eatmethod()       eatmethod();

Dog is eating       Cat is eating 



Deffernce between Mehod Overloading and Method Overriding;


Method Overloading;                            Method Overriding
It is the compile time polymorpshims            It is a Runtime polymorphism;
It occur within the class                       It is perform in two classe with the help of Inheritance;
It helps to increase the readability of the     It is used to provide specific implemention to method which already 
program                                          present in the parent class;
Method having same name but diffrent signature    Method having same name and same signature;
Return type can or cannot change                  Return type must be same;
private and final method can be overlaoded        private and final method cannot be overridin
Argument list must be differnet                    Argument list must be same


Static Keyword================
Static variable static method static constructor static class;

